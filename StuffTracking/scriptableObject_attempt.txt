/*//[Serializable]?
public class PlayerNumbers //: ScriptableObject
{
	public 
}*/

[CreateAssetMenu]
//for stats and such
/*
PlayerHP
PlayerMaxHP
PlayerLvl
PlayerSpecial
PlayerAtk
EnemyHP
EnemyMaxHP
EnemySpecial
EnemyFast
EnemyAtk
*/
public class IntVariable : ScriptableObject{
	public int Value;
	
	public int GetValue(){
		return Value;
	}
	public int SetValue(int bruh){
		Value = bruh;
	}
	public int SetValue(IntVariable bruh){
		Value = bruh.GetValue();
	}
	
	public int Add(int bruh){
		Value += bruh;
	}
	public int Add(IntVariable bruh){
		Value += bruh.GetValue();
	}
}


public class Movement : MonoBehaviour{
	[Serializable]
	public class AlongAxis{
		public KeyCode Pos, Neg;
		
		public AlongAxis(KeyCode plus, KeyCode minus){
			Pos = plus;
			Neg = minus;
		}
	}
	
	public AlongAxis Horizon = new AlongAxis(/*KeyCodes or whatever else is used*/);
	public AlongAxis Vertica = new AlongAxis(/*KeyCodes or whatever else is used*/);
	
	private void Update(){
		//vector stuff to move, use Time.deltaTime
	}
}


public class DamageHandler : ?{
	//^may not be neccesary^
	
	//counter intuitive, as IntVariable.Add() uses +=
	public void TakeDamage(int ow){
		//actual damage should be negative
		ObjHP.Add(ow);
	}
	public void TakeDamage(IntVariable ow){
		//actual damage should be negative
		ObjHP.Add(ow);
	}
	
	public void IfDead(int hp){
		if(hp < 0){
			Destroy(obj);
			//if player, should trigger gameOver sequence
			//if enemy, should trigger victorySequence or check if other enemies are alive
		}
	}
}

//just rewrite the Event stuff from Unite 2017

public class PlayerMovement : MonoBehaviour{
	[Serializable]
	//lets values be changed in the Inspector, but not what this tag is really used for
	
	public class Axis{
		public string AxialName;
		
		public Axis(string name){
			AxialName = name;
		}
		
		public static implicit operator float(Axis axis){
			return Input.GetAxisRaw(axis.AxialName);
		}
	}
	
	//can either use keycodes like the example
	//or use Input.GetAxisRaw, which may actually be the reason behind the super bug (isn't)
	
	public Axis x = new Axis("Horizontal");
	public Axis y = new Axis("Vertical");
	
	//move, man
	public void FixedUpdate(){
		rb.velocity = new Vector2(x * PlayerSpeedMap * Time.deltaTime * (mod + 1), y but same);
	}
}
